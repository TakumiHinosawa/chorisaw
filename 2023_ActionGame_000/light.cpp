//=========================================================================================
//
// ライト　[light.cpp]
// Author:日野澤匠泉
//
//=========================================================================================

//*****************************************************************************************
//インクルード
//*****************************************************************************************
#include "light.h"
#include "manager.h"
#include "renderer.h"

//=========================================================================================
//ライトのコンストラクタ
//=========================================================================================
CLight::CLight()
{

}

//=========================================================================================
//ライトのデストラクタ
//=========================================================================================
CLight::~CLight()
{

}

//=========================================================================================
//ライトの初期化処理
//=========================================================================================
HRESULT CLight::Init(void)
{
	//オブジェクト取得
	CRenderer *pRenderer = CManager::GetRenderer();

	//デバイス取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	D3DXVECTOR3 vecDir;		//設定方向ベクトル

	for (int nCnt = 0; nCnt < NUM_LIGHT; nCnt++)
	{
		//ライトの情報をクリアする
		ZeroMemory(&m_aLight[nCnt], sizeof(D3DLIGHT9));

		//ライトの種類を設定
		m_aLight[nCnt].Type = D3DLIGHT_DIRECTIONAL;

		switch (nCnt)
		{
		case 0:
			//ライトの拡散光を設定
			m_aLight[nCnt].Diffuse = D3DXCOLOR(0.65f, 0.65f, 0.65f, 1.0f);

			//ライトの方向を設定
			vecDir = D3DXVECTOR3(0.22f, -0.85f, 0.45f);
			//vecDir = D3DXVECTOR3(1.0f, 0.0f, 0.0f);
			break;

		case 1:
			//ライトの拡散光を設定
			m_aLight[nCnt].Diffuse = D3DXCOLOR(0.15f, 0.15f, 0.15f, 1.0f);

			//ライトの方向を設定
			vecDir = D3DXVECTOR3(0.89f, -0.15f, 0.15f);
			break;

		case 2:
			//ライトの拡散光を設定
			m_aLight[nCnt].Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);

			//ライトの方向を設定
			vecDir = D3DXVECTOR3(0.2f, -0.8f, -0.4f);
			break;
		}

		D3DXVec3Normalize(&vecDir, &vecDir);		//ベクトルを正規化する
		m_aLight[nCnt].Direction = vecDir;

		//ライトを設定する
		pDevice->SetLight(nCnt, &m_aLight[nCnt]);

		//ライトを有効にする
		pDevice->LightEnable(nCnt, TRUE);
	}

	return S_OK;
}

//=========================================================================================
//ライトの終了処理
//=========================================================================================
void CLight::Uninit(void)
{

}

//=========================================================================================
//ライトの更新処理
//=========================================================================================
void CLight::Update(void)
{

}

