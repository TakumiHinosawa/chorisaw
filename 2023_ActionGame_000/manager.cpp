//=========================================================================================
//
//[manager.cpp]
//Author:日野澤匠泉
//
//=========================================================================================

//*****************************************************************************************
//インクルード
//*****************************************************************************************
#include "manager.h"
#include "renderer.h"
#include "main.h"
#include "input.h"
#include "sound.h"
#include "debugproc.h"
#include "title.h"
#include "game.h"
#include "result.h"
#include "object.h"
#include "tutorial.h"
#include "ranking.h"

//*****************************************************************************************
//静的メンバ変数
//*****************************************************************************************
CRenderer *CManager::m_pRenderer = NULL;
CInputKeyboard *CManager::m_pInputKeyboard = NULL;
CInputController *CManager::m_pInputController = NULL;
CSound *CManager::m_pSound = NULL;
CDebugProc *CManager::m_pDebugProc = NULL;
CScene *CManager::m_pScene = NULL;

//=========================================================================================
//マネージャーコンストラクタ
//=========================================================================================
CManager::CManager()
{

}

//=========================================================================================
//マネージャーデストラクタ
//=========================================================================================
CManager::~CManager()
{

}

//=========================================================================================
//マネージャー初期化処理
//=========================================================================================
HRESULT CManager::Init(HINSTANCE hInstance, HWND hWnd, BOOL bWindow)
{
	//********************************************************
	//レンダラー
	//********************************************************
	if (m_pRenderer == NULL)
	{//情報が使用されていないとき

		//レンダラーの生成
		m_pRenderer = new CRenderer;
	}

	if (m_pRenderer != NULL)
	{//メモリが使用されているとき

		//レンダラーの初期化処理
		m_pRenderer->Init(hWnd, bWindow);
	}

	//********************************************************
	//インプット系
	//********************************************************

	// *** キーボード *** //
	if (m_pInputKeyboard == NULL)
	{//使用されていないとき

		//インプットキーボードの生成
		m_pInputKeyboard = new CInputKeyboard;
	}

	if (m_pInputKeyboard != NULL)
	{//使用されているとき

		//インプットキーボードの初期化
		m_pInputKeyboard->Init(hInstance, hWnd);
	}

	// *** コントローラー *** //
	if (m_pInputController == NULL)
	{//使用されていないとき

		//コントローラーの生成
		m_pInputController = new CInputController;
	}

	if (m_pInputController != NULL)
	{//使用されているとき

		//コントローラーの初期化
		m_pInputController->Init();
	}

	//********************************************************
	//サウンド系
	//********************************************************
	if (m_pSound == NULL)
	{//使用されていないとき

		//サウンドの生成
		m_pSound = new CSound;
	}

	if (m_pSound != NULL)
	{//使用されているとき

		//サウンドの初期化
		if (FAILED(m_pSound->Init(hWnd)))
		{
			MessageBox(hWnd, "サウンド！", "初期化失敗！", MB_ICONWARNING);

			return E_FAIL;
		}
	}
	else
	{
		MessageBox(hWnd, "サウンド！", "初期化失敗！", MB_ICONWARNING);

		return E_FAIL;
	}

	//********************************************************
	//デバッグプロックの生成
	//********************************************************
	if (m_pDebugProc == NULL)
	{//使用されていないとき

		//生成
		m_pDebugProc = new CDebugProc;
	}

	if (m_pDebugProc != NULL)
	{//使用されているとき

		//デバックの初期化
		m_pDebugProc->Init();
	}

	//モードの初期化
	m_pScene = CScene::Create(CScene::MODE_TITLE);

	return S_OK;
}

//=========================================================================================
//マネージャー終了処理
//=========================================================================================
void CManager::Uninit(void)
{
	//********************************************************
	//レンダラー
	//********************************************************
	if (m_pRenderer != NULL)
	{//レンダラー情報があった時

		//レンダラーの終了処理
		m_pRenderer->Uninit();

		//破棄
		delete m_pRenderer;

		//初期化
		m_pRenderer = NULL;
	}

	//********************************************************
	//インプット
	//********************************************************

	// *** キーボード *** //
	if (m_pInputKeyboard != NULL)
	{//使用されていたら

		//終了処理
		m_pInputKeyboard->Uninit();

		//破棄
		delete m_pInputKeyboard;

		//初期化
		m_pInputKeyboard = NULL;
	}

	// *** コントローラー *** //
	if (m_pInputController != NULL)
	{//使用されていたら

		//終了処理
		m_pInputController->Uninit();

		//破棄
		delete m_pInputController;

		//初期化
		m_pInputController = NULL;
	}

	//********************************************************
	//サウンド
	//********************************************************
	if (m_pSound != NULL)
	{//使用されていたら

		//サウンドの終了処理
		m_pSound->Uninit();

		//破棄
		delete m_pSound;

		//初期化
		m_pSound = NULL;
	}

	//********************************************************
	//デバッグ
	//********************************************************
	if (m_pDebugProc != NULL)
	{//使用されていたら

		//終了処理
		m_pDebugProc->Uninit();

		//破棄
		delete m_pDebugProc;

		//初期化
		m_pDebugProc = NULL;
	}

	//モードの終了処理
	m_pScene->Uninit();
}

//=========================================================================================
//マネージャー更新処理
//=========================================================================================
void CManager::Update(void)
{
	//********************************************************
	//レンダラー
	//********************************************************
	if (m_pRenderer != NULL)
	{//レンダラー情報があった時

		//レンダラーの更新処理
		m_pRenderer->Update();
	}

	//********************************************************
	//インプット
	//********************************************************

	// *** キーボード *** //
	if (m_pInputKeyboard != NULL)
	{//使用されていたら

		//更新処理
		m_pInputKeyboard->Update();
	}
	
	// *** コントローラー *** //
	if (m_pInputController != NULL)
	{//使用されていたら

		//更新処理
		m_pInputController->Update();
	}

	//********************************************************
	//デバッグ
	//********************************************************
	if (m_pDebugProc != NULL)
	{//使用されていたら

		//更新処理
		m_pDebugProc->Update();
	}

	//モードの更新処理
	m_pScene->Update();
}

//=========================================================================================
//マネージャー描画処理
//=========================================================================================
void CManager::Draw(void)
{
	//********************************************************
	//レンダラー
	//********************************************************
	if (m_pRenderer != NULL)
	{//レンダラー情報があった時

		//レンダラーの更新処理
		m_pRenderer->Draw();
	}

	//モードの描画処理
	m_pScene->Draw();
}

//=========================================================================================
//シーンのコンストラクタ
//=========================================================================================
CScene::CScene()
{
	//ゲームモード
	m_mode = CScene::MODE(0);
}

//=========================================================================================
//シーンのデストラクタ
//=========================================================================================
CScene::~CScene()
{

}

//=========================================================================================
//シーンの初期化処理
//=========================================================================================
HRESULT CScene::Init(void)
{
	return S_OK;
}

//=========================================================================================
//シーンの終了処理
//=========================================================================================
void CScene::Uninit(void)
{
	
}

//=========================================================================================
//シーンの更新処理
//=========================================================================================
void CScene::Update(void)
{

}

//=========================================================================================
//シーンの描画処理
//=========================================================================================
void CScene::Draw(void)
{

}

//=========================================================================================
//シーンの生成
//=========================================================================================
CScene *CScene::Create(MODE mode)
{
	CScene *pScene = nullptr;

	switch (mode)
	{
	case MODE_TITLE:	// タイトル

		// タイトルを生成
		pScene = CTitle::Create();
		break;

	case MODE_GAME:		// ゲーム

		// ゲームを生成
		pScene = CGame::Create();
		break;

	case MODE_RESULT:	// リザルト

		// リザルトを生成
		pScene = CResult::Create();
		break;

	case MODE_TUTORIAL:	//チュートリアル

		//チュートリアルを生成
		pScene = CTutorial::Create();
		break;

	case MODE_RANKING:	//ランキング

		//ランキングを生成
		pScene = CRanking::Create();
		break;
	}

	return pScene;
}

//=========================================================================================
//モードの設定処理
//=========================================================================================
void CManager::SetMode(CScene::MODE mode)
{
	//サウンドの停止
	m_pSound->Stop();

	if (m_pScene != NULL)
	{//使用されているとき

		//終了処理
		m_pScene->Uninit();

		//初期化
		m_pScene = nullptr;

		//現在のモードを破棄
		delete m_pScene;

		//リリースオール
		CObject::ReleaseAll();
	}
	else
	{
		return;
	}

	//新しいモードの生成
	if (m_pScene == NULL)
	{//使用されていないとき

		//モード生成処理
		m_pScene = CScene::Create(mode);

		//モード設定
		m_pScene->SetMode(mode);
	}
}

//=========================================================================================
//モードの取得
//=========================================================================================
CScene::MODE CScene::GetMode(void)
{
	return m_mode;
}

//=========================================================================================
//モードの設定
//=========================================================================================
void CScene::SetMode(MODE mode)
{
	m_mode = mode;
}

//=========================================================================================
//モードの取得
//=========================================================================================
CScene::MODE CManager::GetMode(void)
{
	return m_pScene->GetMode();
}

//=========================================================================================
//レンダラー取得
//=========================================================================================
CRenderer *CManager::GetRenderer(void)
{
	return m_pRenderer;
}

//=========================================================================================
//インプットオブジェクト取得
//=========================================================================================
CInputKeyboard *CManager::GetInputKeyboard(void)
{
	return m_pInputKeyboard;
}

//=========================================================================================
//インプットオブジェクト取得
//=========================================================================================
CInputController *CManager::GetInputController(void)
{
	return m_pInputController;
}

//=========================================================================================
//サウンド情報取得
//=========================================================================================
CSound *CManager::GetSound(void)
{
	return m_pSound;
}

//=========================================================================================
//デバッグの情報取得
//=========================================================================================
CDebugProc *CManager::GetDebugProc(void)
{
	return m_pDebugProc;
}