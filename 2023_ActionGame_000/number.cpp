//=========================================================================================
//
//[number.cpp]
//Author:日野澤匠泉
//
//=========================================================================================

//*****************************************************************************************
//インクルード
//*****************************************************************************************
#include "number.h"
#include "manager.h"
#include "renderer.h"
#include "object2d.h"

//*****************************************************************************************
//静的メンバ変数初期化
//*****************************************************************************************
LPDIRECT3DTEXTURE9 CNumber::m_pTexture = NULL;

//=========================================================================================
//ナンバーのコンストラクタ
//=========================================================================================
CNumber::CNumber()
{
	m_pObject2D = NULL;
}

//=========================================================================================
//ナンバーのデストラクタ
//=========================================================================================
CNumber::~CNumber()
{

}

//=========================================================================================
//ナンバーのテクスチャ読み込み
//=========================================================================================
HRESULT CNumber::Load(void)
{
	//オブジェクト取得
	CRenderer *pRenderer = CManager::GetManager()->GetRenderer();

	//デバイス取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\number.png",
		&m_pTexture);

	return S_OK;
}

//=========================================================================================
//ナンバーのテクスチャ破棄
//=========================================================================================
void CNumber::Unload(void)
{
	//テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}


//=========================================================================================
//ナンバーの初期化処理
//=========================================================================================
HRESULT CNumber::Init(void)
{
	//オブジェクト生成
	m_pObject2D = CObject2D::Create();

	return S_OK;
}

//=========================================================================================
//ナンバーの終了処理
//=========================================================================================
void CNumber::Uninit(void)
{
	if (m_pObject2D != NULL)
	{//使用されているとき

		//使用されていない状態にする
		m_pObject2D = NULL;
	}
}

//=========================================================================================
//ナンバーの更新処理
//=========================================================================================
void CNumber::Update(void)
{
	////オブジェクトの更新処理
	//m_pObject2D->Update();
}

//=========================================================================================
//ナンバーの描画処理
//=========================================================================================
void CNumber::Draw(void)
{
	////オブジェクトの描画処理
	//m_pObject2D->Draw();
}

//=========================================================================================
//ナンバーの設定処理
//=========================================================================================
CNumber *CNumber::Create(void)
{
	//ポインタの変数を宣言
	CNumber *pNumber;

	//オブジェクト2Dの生成
	pNumber = new CNumber;

	if (pNumber != NULL)
	{//使用されているとき

		//初期化処理
		pNumber->Init();

		//テクスチャの割り当て
		pNumber->m_pObject2D->BindTexture(m_pTexture);
	}

	//オブジェクト情報を返す
	return pNumber;
}

//=========================================================================================
//スコアの設定処理
//=========================================================================================
void CNumber::SetScore(D3DXVECTOR3 pos,int nCnt,int aTexU)
{
	VERTEX_2D *pVtx;

	//頂点バッファをロックし、頂点データへのポインタを取得
	m_pObject2D->GetVtx()->Lock(0, 0, (void**)&pVtx, 0);

	//位置を更新
	pVtx[0].pos = D3DXVECTOR3(pos.x - 25.0f + nCnt * 50.0f, pos.y, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(pos.x + 25.0f + nCnt * 50.0f, pos.y, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(pos.x - 25.0f + nCnt * 50.0f, pos.y + 50.0f, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(pos.x + 25.0f + nCnt * 50.0f, pos.y + 50.0f, 0.0f);

	//テクスチャ座標の更新
	pVtx[0].tex = D3DXVECTOR2(0.0f + aTexU * 0.1f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(0.1f + aTexU * 0.1f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f + aTexU * 0.1f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(0.1f + aTexU * 0.1f, 1.0f);

	//頂点バッファをアンロックする
	m_pObject2D->GetVtx()->Unlock();
}

//=========================================================================================
//スコアの加算処理
//=========================================================================================
void CNumber::AddScore(int nCnt, int aTexU)
{
	VERTEX_2D *pVtx;

	//頂点バッファをロックし、頂点データへのポインタを取得
	m_pObject2D->GetVtx()->Lock(0, 0, (void**)&pVtx, 0);

	//位置を更新
	pVtx[0].pos = D3DXVECTOR3(100.0f + nCnt * 50.0f, 0.0f, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(150.0f + nCnt * 50.0f, 0.0f, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(100.0f + nCnt * 50.0f, 50.0f, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(150.0f + nCnt * 50.0f, 50.0f, 0.0f);

	//テクスチャ座標の更新
	pVtx[0].tex = D3DXVECTOR2(0.0f + aTexU * 0.1f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(0.1f + aTexU * 0.1f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f + aTexU * 0.1f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(0.1f + aTexU * 0.1f, 1.0f);

	//頂点バッファをアンロックする
	m_pObject2D->GetVtx()->Unlock();
}