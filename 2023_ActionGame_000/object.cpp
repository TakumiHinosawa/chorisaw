//=========================================================================================
//
//[object.cpp]
//Author:日野澤匠泉
//
//=========================================================================================

//*****************************************************************************************
//インクルード
//*****************************************************************************************
#include "object.h"
#include "camera.h"
#include "manager.h"

//*****************************************************************************************
//静的メンバ変数
//*****************************************************************************************
CObject *CObject::m_apObject[MAX_CHAR] = {};
int  CObject::m_nNumAll = 0;

//=========================================================================================
//オブジェクトのコンストラクタ
//=========================================================================================
CObject::CObject()
{
	//初期化
	m_type = TYPE_NONE;

	if(m_nNumAll > MAX_CHAR)
	{//最大数を超えた時

		//処理を終わる
		return;
	}

	for (int nCnt = 0; nCnt < MAX_CHAR; nCnt++)
	{
		if (m_apObject[nCnt] == NULL)
		{//使用されていないとき

			m_apObject[nCnt] = this;	//自分自身を代入
			m_nID = nCnt;				//自分自身のIDを保存
			m_nNumAll++;				//オブジェクト総数加算
			break;						//if文から抜ける
		}
	}
}

//=========================================================================================
//オブジェクトのデストラクタ
//=========================================================================================
CObject::~CObject()
{

}

//=========================================================================================
//全てのオブジェクト破棄
//=========================================================================================
void CObject::ReleaseAll(void)
{
	for (int nCnt = 0; nCnt < MAX_CHAR; nCnt++)
	{
		if (m_apObject[nCnt] != NULL)
		{//使用されているとき

			//オブジェクトの終了処理
			m_apObject[nCnt]->Uninit();
		}
	}
}

//=========================================================================================
//全てのオブジェクト更新処理
//=========================================================================================
void CObject::UpdateAll(void)
{
	for (int nCnt = 0; nCnt < MAX_CHAR; nCnt++)
	{
		if (m_apObject[nCnt] != NULL)
		{//使用されているとき

			//オブジェクトの更新処理
			m_apObject[nCnt]->Update();
		}
	}
}

//=========================================================================================
//全てのオブジェクト描画処理
//=========================================================================================
void CObject::DrawAll(void)
{
	for (int nCnt = 0; nCnt < MAX_CHAR; nCnt++)
	{
		if (m_apObject[nCnt] != NULL)
		{//使用されているとき

			//オブジェクトの描画処理
			m_apObject[nCnt]->Draw();
		}
	}
}

//=========================================================================================
//オブジェクトの破棄
//=========================================================================================
void CObject::Release(void)
{
	int nID = m_nID;

	if (m_apObject[nID] != NULL)
	{//使用されているとき

		//自分自身を破棄
		delete m_apObject[nID];

		//オブジェクトの初期化
		m_apObject[nID] = NULL;

		//総数をカウントダウン
		m_nNumAll--;
	}
}

//=========================================================================================
//オブジェクトの設定
//=========================================================================================
void CObject::SetType(TYPE type)
{
	//タイプ設定
	m_type = type;
}

//=========================================================================================SetPosition
//オブジェクトタイプの取得
//=========================================================================================
CObject::TYPE CObject::GetType(void)
{
	//タイプを返す
	return m_type;
}

//=========================================================================================
//オブジェクトの取得
//=========================================================================================
CObject *CObject::GetObject(int nIdx)
{
	return m_apObject[nIdx];
}

D3DXVECTOR3 CObject::GetPosition(void)
{
	return D3DXVECTOR3(0.0f, 0.0f, 0.0f);
}

void CObject::SetPosition(D3DXVECTOR3 pos)
{

}

D3DXVECTOR3 CObject::GetMove(void)
{
	return D3DXVECTOR3(0.0f, 0.0f, 0.0f);
}

void CObject::SetMove(D3DXVECTOR3 move)
{

}

D3DXVECTOR3 CObject::GetRot(void)
{
	return D3DXVECTOR3(0.0f, 0.0f, 0.0f);
}

void CObject::SetRot(D3DXVECTOR3 rot)
{

}

void CObject::SetVtxMax(D3DXVECTOR3 vtxMax)
{

}

D3DXVECTOR3 CObject::GetVtxMax(void)
{
	return D3DXVECTOR3(0.0f, 0.0f, 0.0f);
}

void CObject::SetVtxMin(D3DXVECTOR3 vtxMin)
{

}

D3DXVECTOR3 CObject::GetVtxMin(void)
{
	return D3DXVECTOR3(0.0f, 0.0f, 0.0f);
}

void CObject::Hit(void)
{

}

//HRESULT CObject::Init(int nType)
//{
//	return S_OK;
//}